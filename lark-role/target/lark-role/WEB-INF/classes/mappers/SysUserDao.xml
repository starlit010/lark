<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gome.lark.role.dao.SysUserDao">

	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="com.gome.lark.role.entity.SysUserEntity" id="sysUserMap">
        <result property="userId" column="user_id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="salt" column="salt"/>
        <result property="email" column="email"/>
        <result property="mobile" column="mobile"/>
        <result property="status" column="status"/>
        <result property="deptId" column="dept_id"/>
        <result property="channelId" column="channel_id"/>
        <result property="serviceLimit" column="service_limit"/>
        <result property="defaultState" column="default_state"/>
        <result property="nickname" column="nickname"/>
        <result property="usericon" column="usericon"/>
        <result property="employeeid" column="employeeId"/>
        <result property="usertype" column="usertype"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="remark" column="remark"/>
        <result property="delFlag" column="del_flag"/>
    </resultMap>

	<select id="queryObject" resultType="com.gome.lark.role.entity.SysUserEntity">
		select * from sys_user where user_id = #{value}
	</select>

	<select id="queryByUserName" resultType="com.gome.lark.role.entity.SysUserEntity">
		select * from sys_user where username = #{username}
	</select>

	<select id="queryTotal" resultType="int">
		select count(*) from sys_user u
		<where>
			<if test="username != null and username.trim() != ''">
				and u.`username` like concat('%',#{username},'%')
			</if>
			<!--  数据过滤  -->
			${filterSql}
		</where>
	</select>

	<!-- 查询用户的所有权限 -->
	<select id="queryAllPerms" resultType="string">
		select m.perms from sys_user_role ur
		LEFT JOIN sys_role_menu rm on ur.role_id = rm.role_id
		LEFT JOIN sys_menu m on rm.menu_id = m.menu_id
		where ur.user_id = #{userId}
	</select>

	<!-- 查询用户的所有菜单ID -->
	<select id="queryAllMenuId" resultType="long">
		select distinct rm.menu_id from sys_user_role ur
		LEFT JOIN sys_role_menu rm on ur.role_id = rm.role_id
		where ur.user_id = #{userId}
	</select>

	<select id="queryList" resultType="com.gome.lark.role.entity.SysUserEntity">
		select * from sys_user
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by user_id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
	<insert id="save" parameterType="com.gome.lark.role.entity.SysUserEntity" useGeneratedKeys="true" keyProperty="userId">
		insert into sys_user
		(
			`username`, 
			`password`, 
			`salt`, 
			`email`, 
			`mobile`, 
			`status`, 
			`dept_id`, 
			`channel_id`, 
			`service_limit`, 
			`default_state`, 
			`nickname`, 
			`usericon`, 
			`employeeId`, 
			`usertype`, 
			`create_time`, 
			`update_time`, 
			`remark`, 
			`del_flag`, 
		)
		values
		(
			#{username}, 
			#{password}, 
			#{salt}, 
			#{email}, 
			#{mobile}, 
			#{status}, 
			#{deptId}, 
			#{channelId}, 
			#{serviceLimit}, 
			#{defaultState}, 
			#{nickname}, 
			#{usericon}, 
			#{employeeid}, 
			#{usertype}, 
			#{createTime}, 
			#{updateTime}, 
			#{remark}, 
			#{delFlag}, 
		)
	</insert>
	 
	<update id="update" parameterType="com.gome.lark.role.entity.SysUserEntity">
		update sys_user 
		<set>
			<if test="username != null">`username` = #{username}, </if>
			<if test="password != null">`password` = #{password}, </if>
			<if test="salt != null">`salt` = #{salt}, </if>
			<if test="email != null">`email` = #{email}, </if>
			<if test="mobile != null">`mobile` = #{mobile}, </if>
			<if test="status != null">`status` = #{status}, </if>
			<if test="deptId != null">`dept_id` = #{deptId}, </if>
			<if test="channelId != null">`channel_id` = #{channelId}, </if>
			<if test="serviceLimit != null">`service_limit` = #{serviceLimit}, </if>
			<if test="defaultState != null">`default_state` = #{defaultState}, </if>
			<if test="nickname != null">`nickname` = #{nickname}, </if>
			<if test="usericon != null">`usericon` = #{usericon}, </if>
			<if test="employeeid != null">`employeeId` = #{employeeid}, </if>
			<if test="usertype != null">`usertype` = #{usertype}, </if>
			<if test="createTime != null">`create_time` = #{createTime}, </if>
			<if test="updateTime != null">`update_time` = #{updateTime}, </if>
			<if test="remark != null">`remark` = #{remark}, </if>
			<if test="delFlag != null">`del_flag` = #{delFlag}, </if>
		</set>
		where user_id = #{userId}
	</update>
	
	<delete id="delete">
		delete from sys_user where user_id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from sys_user where user_id in 
		<foreach item="userId" collection="array" open="(" separator="," close=")">
			#{userId}
		</foreach>
	</delete>

</mapper>